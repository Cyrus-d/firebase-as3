<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="800" minHeight="600" applicationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;			
			import spark.events.GridSelectionEvent;			
			
            //It is strongly recommended to set the rules for this node to be read and write by everyone so you can quickly test it
			private static const JOURNAL_URL:String = "https://<YOUR-PROJECT-ID>.firebaseio.com/journal";
			
			protected function init(event:FlexEvent):void
			{
				loadJournal();
			}
			
			protected function selectItem(event:GridSelectionEvent):void
			{
				titleInput.text = journalGrid.selectedItem.title;
				descriptionInput.text = journalGrid.selectedItem.description;
				
				deleteBtn.enabled = true;
				modifyBtn.enabled = true;
			}
			
			/*
			Read block
			*/
			private function loadJournal():void
			{
				var request:URLRequest = new URLRequest(JOURNAL_URL+".json");
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(flash.events.Event.COMPLETE, journalLoaded);
				loader.load(request);
			}
			
			private function journalLoaded(event:flash.events.Event):void
			{
				event.currentTarget.removeEventListener(flash.events.Event.COMPLETE, journalLoaded);
				
				//The JSON generated by Firebase contains the id as the node key, we use this function to add it to our Objects
				var rawData:Object = JSON.parse(event.currentTarget.data);			
				var entriesArray:Array = new Array();
				
				for (var parent:String in rawData)
				{
					var tempObject:Object = new Object();
					tempObject.id = parent;
					
					for (var child:* in rawData[parent])
					{
						tempObject[child] = rawData[parent][child];
					}
					
					entriesArray.push(tempObject);
					tempObject = null;
				}
				
				journalGrid.dataProvider = new ArrayList(entriesArray);				
				
				titleInput.text = "";
				descriptionInput.text = "";
				deleteBtn.enabled = false;
				modifyBtn.enabled = false;
			}
			
			/*
			Insert block
			*/
			private function saveEntry():void
			{
				var myObject:Object = new Object();
				myObject.title = titleInput.text;
				myObject.description = descriptionInput.text;
				myObject.timestamp = new Date().getTime();
				
				var request:URLRequest = new URLRequest(JOURNAL_URL+".json");
				request.data = JSON.stringify(myObject);
				request.method = URLRequestMethod.POST;
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(flash.events.Event.COMPLETE, entrySent);
				loader.load(request);		
			}
			
			private function entrySent(event:flash.events.Event):void
			{
				event.currentTarget.removeEventListener(flash.events.Event.COMPLETE, entrySent);
				trace(event.currentTarget.data);		
				loadJournal();
			}
			
			/*
			Delete block
			*/
			private function deleteEntry():void
			{
				var header:URLRequestHeader = new URLRequestHeader("X-HTTP-Method-Override", "DELETE");			
				
				var request:URLRequest = new URLRequest(JOURNAL_URL+"/"+journalGrid.selectedItem.id+".json");
				request.method = URLRequestMethod.POST;
				request.requestHeaders.push(header);
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(flash.events.Event.COMPLETE, entryDeleted);
				loader.load(request);			
			}
			
			private function entryDeleted(event:flash.events.Event):void
			{
				event.currentTarget.removeEventListener(flash.events.Event.COMPLETE, entryDeleted);
				trace(event.currentTarget.data);
				loadJournal();
			}
			
			/*
			Update block
			*/
			private function updateEntry():void
			{
				var header:URLRequestHeader = new URLRequestHeader("X-HTTP-Method-Override", "PATCH");			
				
				var myObject:Object = new Object();
				myObject.title = titleInput.text;
				myObject.description = descriptionInput.text;
				
				var request:URLRequest = new URLRequest(JOURNAL_URL+"/"+journalGrid.selectedItem.id+".json");
				request.data = JSON.stringify(myObject);
				request.method = URLRequestMethod.POST;
				request.requestHeaders.push(header);
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(flash.events.Event.COMPLETE, entryUpdated);
				loader.load(request);			
			}
			
			private function entryUpdated(event:flash.events.Event):void
			{
				event.currentTarget.removeEventListener(flash.events.Event.COMPLETE, entryUpdated);
				trace(event.currentTarget.data);
				loadJournal();
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup left="10" right="10" top="10" bottom="10">
		<s:DataGrid id="journalGrid" selectionChange="selectItem(event)" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="ID" dataField="id" />
					<s:GridColumn headerText="Title" dataField="title" />
					<s:GridColumn headerText="Description" dataField="description" />
					<s:GridColumn headerText="Timestamp" dataField="timestamp" />
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
        
		<s:TextInput id="titleInput" prompt="Type a Title" width="100%"/>
		<s:TextArea id="descriptionInput" prompt="Type a Description" width="100%" height="100"/>
		
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="deleteBtn" label="Delete" click="deleteEntry()"/>
			<s:Button id="modifyBtn" label="Modify" click="updateEntry()"/>
			<s:Button id="createBtn" label="Create" click="saveEntry()"/>			
		</s:HGroup>
	</s:VGroup>	
	
</s:WindowedApplication>